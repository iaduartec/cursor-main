name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.12.3 --activate
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Type check
        run: pnpm type-check
        continue-on-error: true
      - name: Lint
        run: pnpm lint
        continue-on-error: true
      - name: Build
        run: pnpm build

  deploy:
    runs-on: ubuntu-latest
    # Despliega aunque falle validate; requiere estar en main y disponer de credenciales de Vercel (CLI) o un Deploy Hook
    if: >-
      github.ref == 'refs/heads/main' && (
        (secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '') ||
        (secrets.VERCEL_DEPLOY_HOOK_URL != '')
      )
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Enable corepack and activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.12.3 --activate
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Vercel CLI version
        run: pnpm dlx vercel@latest --version
      - name: Pull Vercel env (production)
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          pnpm dlx vercel@latest pull --yes --environment=production --token "$VERCEL_TOKEN"
      - name: Build (Vercel prebuilt)
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Build del proyecto usando el builder de Vercel
          pnpm dlx vercel@latest build --token "$VERCEL_TOKEN"
      - name: Deploy to Production (prebuilt)
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Publica el build preconstruido a producci√≥n
          pnpm dlx vercel@latest deploy --prebuilt --prod --token "$VERCEL_TOKEN" --yes
      - name: Trigger Vercel Deploy Hook (fallback)
        if: ${{ secrets.VERCEL_DEPLOY_HOOK_URL != '' && !(secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '') }}
        run: |
          echo "Triggering Vercel Deploy Hook..."
          curl -fsSL -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}" && echo "Hook triggered"