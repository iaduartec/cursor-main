{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\n\nconst Servicio = defineDocumentType(() => ({\n  name: 'Servicio',\n  filePathPattern: `servicios/*.mdx`,\n  fields: {\n    title: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n    image: { type: 'string', required: false },\n    areaServed: { type: 'string', required: false },\n    hasOfferCatalog: { type: 'boolean', required: false },\n    faq: { type: 'list', of: { type: 'string' }, required: false },\n    schema: { type: 'json', required: false },\n  },\n  computedFields: {\n    url: { type: 'string', resolve: (doc: any) => `/servicios/${doc.slug}` },\n  },\n}));\n\nconst Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `blog/*.mdx`,\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    description: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n    category: { type: 'string', required: false },\n    image: { type: 'string', required: false },\n    schema: { type: 'json', required: false },\n  },\n  computedFields: {\n    url: { type: 'string', resolve: (doc: any) => `/blog/${doc.slug}` },\n  },\n}));\n\nconst Legal = defineDocumentType(() => ({\n  name: 'Legal',\n  filePathPattern: `legal/*.mdx`,\n  fields: {\n    title: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n  },\n  computedFields: {\n    url: { type: 'string', resolve: (doc: any) => `/legal/${doc.slug}` },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Servicio, Blog, Legal],\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAE/C,IAAM,WAAW,mBAAmB,OAAO;AAAA,EACzC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACzC,YAAY,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC9C,iBAAiB,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IACpD,KAAK,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAC7D,QAAQ,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,EAC1C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAa,cAAc,IAAI,IAAI,GAAG;AAAA,EACzE;AACF,EAAE;AAEF,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACzC,QAAQ,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,EAC1C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAa,SAAS,IAAI,IAAI,GAAG;AAAA,EACpE;AACF,EAAE;AAEF,IAAM,QAAQ,mBAAmB,OAAO;AAAA,EACtC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACzC;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK,EAAE,MAAM,UAAU,SAAS,CAAC,QAAa,UAAU,IAAI,IAAI,GAAG;AAAA,EACrE;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,UAAU,MAAM,KAAK;AACvC,CAAC;",
  "names": []
}
